{
  "version": 3,
  "sources": ["../../node_modules/@mui/x-tree-view/TreeItem2Icon/TreeItem2Icon.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport { useTreeViewContext } from \"../internals/TreeViewProvider/index.js\";\nimport { TreeViewCollapseIcon, TreeViewExpandIcon } from \"../icons/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction TreeItem2Icon(props) {\n  const {\n    slots,\n    slotProps,\n    status\n  } = props;\n  const context = useTreeViewContext();\n  const contextIcons = _extends({}, context.icons.slots, {\n    expandIcon: context.icons.slots.expandIcon ?? TreeViewExpandIcon,\n    collapseIcon: context.icons.slots.collapseIcon ?? TreeViewCollapseIcon\n  });\n  const contextIconProps = context.icons.slotProps;\n  let iconName;\n  if (slots?.icon) {\n    iconName = 'icon';\n  } else if (status.expandable) {\n    if (status.expanded) {\n      iconName = 'collapseIcon';\n    } else {\n      iconName = 'expandIcon';\n    }\n  } else {\n    iconName = 'endIcon';\n  }\n  const Icon = slots?.[iconName] ?? contextIcons[iconName];\n  const iconProps = useSlotProps({\n    elementType: Icon,\n    externalSlotProps: tempOwnerState => _extends({}, resolveComponentProps(contextIconProps[iconName], tempOwnerState), resolveComponentProps(slotProps?.[iconName], tempOwnerState)),\n    // TODO: Add proper ownerState\n    ownerState: {}\n  });\n  if (!Icon) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(Icon, _extends({}, iconProps));\n}\nprocess.env.NODE_ENV !== \"production\" ? TreeItem2Icon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  status: PropTypes.shape({\n    disabled: PropTypes.bool.isRequired,\n    editable: PropTypes.bool.isRequired,\n    editing: PropTypes.bool.isRequired,\n    expandable: PropTypes.bool.isRequired,\n    expanded: PropTypes.bool.isRequired,\n    focused: PropTypes.bool.isRequired,\n    selected: PropTypes.bool.isRequired\n  }).isRequired\n} : void 0;\nexport { TreeItem2Icon };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,YAAuB;AACvB,wBAAsB;AAKtB,yBAA4B;AAC5B,SAAS,cAAc,OAAO;AAC5B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,UAAU,mBAAmB;AACnC,QAAM,eAAe,SAAS,CAAC,GAAG,QAAQ,MAAM,OAAO;AAAA,IACrD,YAAY,QAAQ,MAAM,MAAM,cAAc;AAAA,IAC9C,cAAc,QAAQ,MAAM,MAAM,gBAAgB;AAAA,EACpD,CAAC;AACD,QAAM,mBAAmB,QAAQ,MAAM;AACvC,MAAI;AACJ,MAAI,+BAAO,MAAM;AACf,eAAW;AAAA,EACb,WAAW,OAAO,YAAY;AAC5B,QAAI,OAAO,UAAU;AACnB,iBAAW;AAAA,IACb,OAAO;AACL,iBAAW;AAAA,IACb;AAAA,EACF,OAAO;AACL,eAAW;AAAA,EACb;AACA,QAAM,QAAO,+BAAQ,cAAa,aAAa,QAAQ;AACvD,QAAM,YAAY,qBAAa;AAAA,IAC7B,aAAa;AAAA,IACb,mBAAmB,oBAAkB,SAAS,CAAC,GAAG,8BAAsB,iBAAiB,QAAQ,GAAG,cAAc,GAAG,8BAAsB,uCAAY,WAAW,cAAc,CAAC;AAAA;AAAA,IAEjL,YAAY,CAAC;AAAA,EACf,CAAC;AACD,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AACA,aAAoB,mBAAAA,KAAK,MAAM,SAAS,CAAC,GAAG,SAAS,CAAC;AACxD;AACA,OAAwC,cAAc,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShE,WAAW,kBAAAC,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB,OAAO,kBAAAA,QAAU;AAAA,EACjB,QAAQ,kBAAAA,QAAU,MAAM;AAAA,IACtB,UAAU,kBAAAA,QAAU,KAAK;AAAA,IACzB,UAAU,kBAAAA,QAAU,KAAK;AAAA,IACzB,SAAS,kBAAAA,QAAU,KAAK;AAAA,IACxB,YAAY,kBAAAA,QAAU,KAAK;AAAA,IAC3B,UAAU,kBAAAA,QAAU,KAAK;AAAA,IACzB,SAAS,kBAAAA,QAAU,KAAK;AAAA,IACxB,UAAU,kBAAAA,QAAU,KAAK;AAAA,EAC3B,CAAC,EAAE;AACL,IAAI;",
  "names": ["_jsx", "PropTypes"]
}
